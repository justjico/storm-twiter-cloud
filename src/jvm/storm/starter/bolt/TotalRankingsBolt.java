package storm.starter.bolt;

import org.apache.log4j.Logger;

import storm.starter.tools.Rankings;
import backtype.storm.tuple.Tuple;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import storm.starter.tools.Rankings;
import storm.starter.util.TupleHelpers;
import backtype.storm.topology.BasicOutputCollector;
import backtype.storm.tuple.Values;


/**
 * This bolt merges incoming {@link Rankings}.
 * 
 * It can be used to merge intermediate rankings generated by {@link IntermediateRankingsBolt} into a final,
 * consolidated ranking. To do so, configure this bolt with a globalGrouping on {@link IntermediateRankingsBolt}.
 * 
 */
public final class TotalRankingsBolt extends AbstractRankerBolt {

    private static final long serialVersionUID = -8447525895532302198L;
    private static final Logger LOG = Logger.getLogger(TotalRankingsBolt.class);

    public TotalRankingsBolt() {
        super();
    }

    public TotalRankingsBolt(int topN) {
        super(topN);
    }

    public TotalRankingsBolt(int topN, int emitFrequencyInSeconds) {
        super(topN, emitFrequencyInSeconds);
    }

    @Override
    void updateRankingsWithTuple(Tuple tuple) {
        Rankings rankingsToBeMerged = (Rankings) tuple.getValue(0);
        super.getRankings().updateWith(rankingsToBeMerged);
    }

    @Override
    public final void execute(Tuple tuple, BasicOutputCollector collector) {
        if (TupleHelpers.isTickTuple(tuple)) {
            getLogger().info("Received tick tuple, triggering emit of current rankings");
            collector.emit(new Values(rankings));
            getLogger().info("Rankings: " + rankings);
  
            try {

            File file = new File("/var/www/html/cloud.json");
            // if file doesnt exists, then create it
	    if (!file.exists()) 
              file.createNewFile();

            FileWriter fw = new FileWriter(file.getAbsoluteFile());
			BufferedWriter bw = new BufferedWriter(fw);
                        bw.write(rankings.toString());
			bw.close();
 
            } catch (IOException e) {
			e.printStackTrace();
	    }
        }
        else {
            updateRankingsWithTuple(tuple);
        }
    }

    @Override
    Logger getLogger() {
        return LOG;
    }

}
